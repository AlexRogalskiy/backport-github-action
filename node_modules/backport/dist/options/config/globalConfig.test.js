"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const make_dir_1 = __importDefault(require("make-dir"));
const fs = __importStar(require("../../services/fs-promisified"));
const globalConfig_1 = require("./globalConfig");
describe('config', () => {
    afterEach(() => jest.clearAllMocks());
    describe('getGlobalConfig', () => {
        let res;
        beforeEach(async () => {
            jest.spyOn(fs, 'chmod').mockResolvedValueOnce();
            jest.spyOn(fs, 'writeFile').mockResolvedValueOnce();
            jest.spyOn(fs, 'readFile').mockResolvedValueOnce(JSON.stringify({
                accessToken: 'myAccessToken',
                username: 'sqren',
            }));
            res = await globalConfig_1.getGlobalConfig();
        });
        it("should create config if it doesn't exist", () => {
            expect(fs.writeFile).toHaveBeenCalledWith('/myHomeDir/.backport/config.json', expect.any(String), { flag: 'wx', mode: 384 });
        });
        it("should create config folders if it they don't exist", () => {
            expect(make_dir_1.default).toHaveBeenCalledWith('/myHomeDir/.backport/repositories');
        });
        it('should load config', () => {
            expect(fs.readFile).toHaveBeenCalledWith('/myHomeDir/.backport/config.json', 'utf8');
        });
        it('should return config', () => {
            expect(res).toEqual({
                accessToken: 'myAccessToken',
                username: 'sqren',
            });
        });
    });
    describe('createGlobalConfigIfNotExist', () => {
        it('should create config and succeed', async () => {
            jest.spyOn(fs, 'writeFile').mockResolvedValueOnce(undefined);
            const didCreate = await globalConfig_1.createGlobalConfigIfNotExist('/path/to/globalConfig', 'myConfigTemplate');
            expect(didCreate).toEqual(true);
            expect(fs.writeFile).toHaveBeenCalledWith('/path/to/globalConfig', expect.stringContaining('myConfigTemplate'), { flag: 'wx', mode: 384 });
        });
        it('should not fail if config already exists', async () => {
            const err = new Error();
            err.code = 'EEXIST';
            jest.spyOn(fs, 'writeFile').mockRejectedValueOnce(err);
            const didCreate = await globalConfig_1.createGlobalConfigIfNotExist('myPath', 'myConfigTemplate');
            expect(didCreate).toEqual(false);
        });
    });
});
