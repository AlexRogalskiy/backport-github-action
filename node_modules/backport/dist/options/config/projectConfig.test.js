"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const find_up_1 = __importDefault(require("find-up"));
const fs = __importStar(require("../../services/fs-promisified"));
const projectConfig_1 = require("./projectConfig");
describe('getProjectConfig', () => {
    afterEach(() => jest.clearAllMocks());
    describe('when projectConfig is valid', () => {
        let projectConfig;
        beforeEach(async () => {
            jest
                .spyOn(fs, 'readFile')
                .mockResolvedValueOnce(JSON.stringify({ upstream: 'elastic/kibana', branches: ['6.x'] }));
            projectConfig = await projectConfig_1.getProjectConfig();
        });
        it('should call findUp', () => {
            expect(find_up_1.default).toHaveBeenCalledWith('.backportrc.json');
        });
        it('should return config with branches', () => {
            expect(projectConfig).toEqual({
                branches: ['6.x'],
                upstream: 'elastic/kibana',
            });
        });
    });
    describe('when projectConfig is empty', () => {
        it('should return empty config', async () => {
            jest.spyOn(fs, 'readFile').mockResolvedValueOnce('{}');
            const projectConfig = await projectConfig_1.getProjectConfig();
            expect(projectConfig).toEqual({ targetBranchChoices: undefined });
        });
    });
    describe('when projectConfig is missing', () => {
        it('should return empty config', async () => {
            find_up_1.default.mockReturnValueOnce(undefined);
            const projectConfig = await projectConfig_1.getProjectConfig();
            expect(projectConfig).toEqual({});
        });
    });
});
