"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGlobalConfigIfNotExist = exports.createGlobalConfigAndFolderIfNotExist = exports.getGlobalConfig = void 0;
const make_dir_1 = __importDefault(require("make-dir"));
const env_1 = require("../../services/env");
const fs_promisified_1 = require("../../services/fs-promisified");
const readConfigFile_1 = require("./readConfigFile");
async function getGlobalConfig(ci) {
    // don't attempt to fetch global config in ci environment
    if (ci) {
        return;
    }
    await createGlobalConfigAndFolderIfNotExist();
    const globalConfigPath = env_1.getGlobalConfigPath();
    return readConfigFile_1.readConfigFile(globalConfigPath);
}
exports.getGlobalConfig = getGlobalConfig;
async function createGlobalConfigAndFolderIfNotExist() {
    const reposPath = env_1.getReposPath();
    const globalConfigPath = env_1.getGlobalConfigPath();
    const configTemplate = getConfigTemplate();
    await make_dir_1.default(reposPath);
    const didCreate = await createGlobalConfigIfNotExist(globalConfigPath, configTemplate);
    await ensureCorrectPermissions(globalConfigPath);
    return didCreate;
}
exports.createGlobalConfigAndFolderIfNotExist = createGlobalConfigAndFolderIfNotExist;
function ensureCorrectPermissions(globalConfigPath) {
    return fs_promisified_1.chmod(globalConfigPath, '600');
}
async function createGlobalConfigIfNotExist(globalConfigPath, configTemplate) {
    try {
        await fs_promisified_1.writeFile(globalConfigPath, configTemplate, {
            flag: 'wx',
            mode: 0o600,
        });
        return true;
    }
    catch (e) {
        const FILE_ALREADY_EXISTS = 'EEXIST';
        if (e.code !== FILE_ALREADY_EXISTS) {
            throw e;
        }
        return false;
    }
}
exports.createGlobalConfigIfNotExist = createGlobalConfigIfNotExist;
function getConfigTemplate() {
    return `{
    // Github personal access token. Must be created here: https://github.com/settings/tokens/new
    // Must have "Repo: Full control of private repositories"
    "accessToken": "",

    // Github username, eg. kimchy
    "username": ""
  }`;
}
