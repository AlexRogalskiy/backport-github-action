"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOptionsFromCliArgs = void 0;
const lodash_isstring_1 = __importDefault(require("lodash.isstring"));
const yargs_1 = __importDefault(require("yargs"));
function getOptionsFromCliArgs(configOptions, argv) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    const cliArgs = yargs_1.default(argv)
        .parserConfiguration({
        'strip-dashed': true,
        'strip-aliased': true,
        'boolean-negation': false,
    })
        .usage('$0 [args]')
        .wrap(Math.max(100, Math.min(120, yargs_1.default.terminalWidth())))
        .option('accessToken', {
        default: configOptions.accessToken,
        alias: 'accesstoken',
        description: 'Github access token',
        type: 'string',
    })
        // show users own commits
        .option('all', {
        default: (_a = configOptions.all) !== null && _a !== void 0 ? _a : false,
        description: 'List all commits',
        alias: 'a',
        type: 'boolean',
    })
        .option('author', {
        default: configOptions.author,
        description: 'Show commits by specific author',
        type: 'string',
    })
        .option('assignees', {
        default: configOptions.assignees || [],
        description: 'Add assignees to the target pull request',
        alias: ['assignee', 'assign'],
        type: 'array',
    })
        .option('autoAssign', {
        default: (_b = configOptions.autoAssign) !== null && _b !== void 0 ? _b : false,
        description: 'Auto assign the target pull request to yourself',
        type: 'boolean',
    })
        .option('ci', {
        default: (_c = configOptions.ci) !== null && _c !== void 0 ? _c : false,
        description: 'Disable interactive prompts',
        type: 'boolean',
    })
        .option('dryRun', {
        default: false,
        description: 'Perform backport without pushing to Github',
        type: 'boolean',
    })
        .option('editor', {
        default: configOptions.editor,
        description: 'Editor to be opened during conflict resolution',
        type: 'string',
    })
        // push target branch to {username}/{repoName}
        .option('fork', {
        default: (_d = configOptions.fork) !== null && _d !== void 0 ? _d : true,
        description: 'Create backports in fork or origin repo',
        type: 'boolean',
    })
        .option('gitHostname', {
        hidden: true,
        default: (_e = configOptions.gitHostname) !== null && _e !== void 0 ? _e : 'github.com',
        description: 'Hostname for Github',
        type: 'string',
    })
        .option('githubApiBaseUrlV3', {
        hidden: true,
        default: (_f = configOptions.githubApiBaseUrlV3) !== null && _f !== void 0 ? _f : 'https://api.github.com',
        description: `Base url for Github's REST (v3) API`,
        type: 'string',
    })
        .option('githubApiBaseUrlV4', {
        hidden: true,
        default: (_g = configOptions.githubApiBaseUrlV4) !== null && _g !== void 0 ? _g : 'https://api.github.com/graphql',
        description: `Base url for Github's GraphQL (v4) API`,
        type: 'string',
    })
        .option('mainline', {
        description: 'Parent id of merge commit. Defaults to 1 when supplied without arguments',
        type: 'number',
        coerce: (mainline) => {
            // `--mainline` (default to 1 when no parent is given)
            if (mainline === undefined) {
                return 1;
            }
            // use specified mainline parent
            if (Number.isInteger(mainline)) {
                return mainline;
            }
            // Invalid value provided
            throw new Error(`--mainline must be an integer. Received: ${mainline}`);
        },
    })
        // display 10 commits to pick from
        .option('maxNumber', {
        default: (_h = configOptions.maxNumber) !== null && _h !== void 0 ? _h : 10,
        description: 'Number of commits to choose from',
        alias: ['number', 'n'],
        type: 'number',
    })
        // cli-only
        .option('multiple', {
        description: 'Select multiple branches/commits',
        type: 'boolean',
    })
        // allow picking multiple target branches
        .option('multipleBranches', {
        default: (_j = configOptions.multipleBranches) !== null && _j !== void 0 ? _j : true,
        description: 'Backport to multiple branches',
        type: 'boolean',
    })
        // allow picking multiple commits
        .option('multipleCommits', {
        default: (_k = configOptions.multipleCommits) !== null && _k !== void 0 ? _k : false,
        description: 'Backport multiple commits',
        type: 'boolean',
    })
        .option('noVerify', {
        default: (_l = configOptions.noVerify) !== null && _l !== void 0 ? _l : true,
        description: 'Bypasses the pre-commit and commit-msg hooks',
        type: 'boolean',
    })
        .option('path', {
        default: configOptions.path,
        description: 'Only list commits touching files under the specified path',
        alias: 'p',
        type: 'string',
    })
        .option('prTitle', {
        default: (_m = configOptions.prTitle) !== null && _m !== void 0 ? _m : '[{targetBranch}] {commitMessages}',
        description: 'Title of pull request',
        alias: 'title',
        type: 'string',
    })
        .option('prDescription', {
        default: configOptions.prDescription,
        description: 'Description to be added to pull request',
        alias: 'description',
        type: 'string',
    })
        .option('prFilter', {
        default: configOptions.prFilter,
        conflicts: ['pullNumber', 'sha'],
        description: `Filter source pull requests by a query`,
        type: 'string',
    })
        .option('pullNumber', {
        default: configOptions.pullNumber,
        conflicts: ['sha', 'prFilter'],
        description: 'Pull request to backport',
        alias: 'pr',
        type: 'number',
    })
        .option('resetAuthor', {
        default: (_o = configOptions.resetAuthor) !== null && _o !== void 0 ? _o : false,
        description: 'Set yourself as commit author',
        type: 'boolean',
    })
        .option('sha', {
        default: configOptions.sha,
        conflicts: ['pullNumber', 'prFilter'],
        description: 'Commit sha to backport',
        alias: 'commit',
        type: 'string',
    })
        .option('sourceBranch', {
        default: configOptions.sourceBranch,
        description: `List commits to backport from another branch than master`,
        type: 'string',
    })
        .option('sourcePRLabels', {
        default: (_p = configOptions.sourcePRLabels) !== null && _p !== void 0 ? _p : [],
        description: 'Add labels to the source (original) PR',
        alias: 'sourcePRLabel',
        type: 'array',
    })
        .option('targetBranches', {
        default: configOptions.targetBranches || [],
        description: 'Branch(es) to backport to',
        alias: ['targetBranch', 'branch', 'b'],
        type: 'array',
        string: true,
    })
        .option('targetBranchChoices', {
        // backwards-compatability: `branches` was renamed `targetBranchChoices`
        default: (_r = (_q = configOptions.targetBranchChoices) !== null && _q !== void 0 ? _q : configOptions.branches) !== null && _r !== void 0 ? _r : [],
        description: 'List branches to backport to',
        alias: 'targetBranchChoice',
        type: 'array',
    })
        .option('targetPRLabels', {
        // backwards-compatability: `labels` was renamed `targetPRLabels`
        default: (_t = (_s = configOptions.targetPRLabels) !== null && _s !== void 0 ? _s : configOptions.labels) !== null && _t !== void 0 ? _t : [],
        description: 'Add labels to the target (backport) PR',
        alias: ['labels', 'label', 'l'],
        type: 'array',
    })
        // cli-only
        .option('verify', {
        description: `Opposite of no-verify`,
        type: 'boolean',
    })
        .option('upstream', {
        default: configOptions.upstream,
        description: 'Name of repository',
        alias: 'up',
        type: 'string',
    })
        .option('username', {
        default: configOptions.username,
        description: 'Github username',
        type: 'string',
    })
        .option('verbose', {
        default: (_u = configOptions.verbose) !== null && _u !== void 0 ? _u : false,
        description: 'Show additional debug information',
        type: 'boolean',
    })
        .alias('version', 'v')
        .alias('version', 'V')
        .help()
        .epilogue('For bugs, feature requests or questions: https://github.com/sqren/backport/issues\nOr contact me directly: https://twitter.com/sorenlouv').argv;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars
    const { $0, _, verify, multiple, autoAssign, ...rest } = cliArgs;
    return {
        ...rest,
        // `autoFixConflicts` is not available as cli argument
        autoFixConflicts: configOptions.autoFixConflicts,
        // auto-assign the current user to the target pull request or the assignees specified
        assignees: autoAssign ? [rest.username] : rest.assignees,
        // `branchLabelMapping` is not available as cli argument
        branchLabelMapping: configOptions.branchLabelMapping,
        // `multiple` is a cli-only flag to override `multipleBranches` and `multipleCommits`
        multipleBranches: multiple !== null && multiple !== void 0 ? multiple : cliArgs.multipleBranches,
        multipleCommits: multiple !== null && multiple !== void 0 ? multiple : cliArgs.multipleCommits,
        // `verify` is a cli-only flag to flip the default of `no-verify`
        noVerify: verify !== null && verify !== void 0 ? verify : rest.noVerify,
        // convert from array of primitives to array of object
        targetBranchChoices: getTargetBranchChoicesAsObject(rest.targetBranchChoices),
    };
}
exports.getOptionsFromCliArgs = getOptionsFromCliArgs;
// in the config `branches` can either be a string or an object.
// We need to transform it so that it is always treated as an object troughout the application
function getTargetBranchChoicesAsObject(targetBranchChoices) {
    return targetBranchChoices.map((choice) => {
        if (lodash_isstring_1.default(choice)) {
            return {
                name: choice,
                checked: false,
            };
        }
        return choice;
    });
}
