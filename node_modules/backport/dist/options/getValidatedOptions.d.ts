import { OptionsFromCliArgs } from './cliArgs';
export declare type ValidatedOptions = ReturnType<typeof getValidatedOptions>;
export declare function getValidatedOptions({ upstream, ...options }: OptionsFromCliArgs): {
    accessToken: string;
    username: string;
    repoName: string;
    repoOwner: string;
    author: string;
    all: boolean;
    autoFixConflicts: (({ files, directory, logger, targetBranch, }: {
        files: string[];
        directory: string;
        logger: {
            error: (message: string, meta?: unknown) => void;
            warn: (message: string, meta?: unknown) => void;
            info: (message: string, meta?: unknown) => void;
            verbose: (message: string, meta?: unknown) => void;
            debug: (message: string, meta?: unknown) => void;
        };
        targetBranch: string;
    }) => boolean | Promise<boolean>) | undefined;
    assignees: string[];
    branchLabelMapping: Record<string, string> | undefined;
    multipleBranches: boolean;
    multipleCommits: boolean;
    noVerify: boolean;
    targetBranchChoices: import("./ConfigOptions").BranchChoice[];
    ci: boolean;
    dryRun: boolean;
    editor: string | undefined;
    fork: boolean;
    gitHostname: string;
    githubApiBaseUrlV3: string;
    githubApiBaseUrlV4: string;
    mainline: number | undefined;
    maxNumber: number;
    path: string | undefined;
    prTitle: string;
    prDescription: string | undefined;
    prFilter: string | undefined;
    pullNumber: number | undefined;
    resetAuthor: boolean;
    sha: string | undefined;
    sourceBranch: string | undefined;
    sourcePRLabels: string[];
    targetBranches: string[];
    targetPRLabels: string[];
    verbose: boolean;
};
