"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const logger = __importStar(require("../services/logger"));
const nockHelpers_1 = require("../test/nockHelpers");
const options_1 = require("./options");
function mockGetDefaultRepoBranch({ defaultBranch, refName, }) {
    return nockHelpers_1.mockGqlRequest({
        name: 'DefaultRepoBranch',
        statusCode: 200,
        body: {
            data: {
                repository: {
                    ref: { name: refName },
                    defaultBranchRef: { name: defaultBranch },
                },
            },
        },
    });
}
describe('getOptions', () => {
    const defaultArgs = [
        '--branch',
        '6.0',
        '--branch',
        '6.1',
        '--upstream',
        'elastic/kibana',
        // use localhost to avoid CORS issues with nock
        '--github-api-base-url-v4',
        'http://localhost/graphql',
    ];
    afterEach(() => {
        jest.clearAllMocks();
        nock_1.default.cleanAll();
    });
    it('should use the default repository branch as sourceBranch', async () => {
        const mockCalls = mockGetDefaultRepoBranch({
            defaultBranch: 'my-default-branch',
        });
        const options = await options_1.getOptions(defaultArgs);
        expect(mockCalls.length).toBe(1);
        expect(options.sourceBranch).toBe('my-default-branch');
    });
    it('should use explicit sourceBranch instead of defaultBranch', async () => {
        const argv = [
            '--branch',
            '6.0',
            '--branch',
            '6.1',
            '--upstream',
            'elastic/kibana',
            '--source-branch',
            'my-source-branch',
            '--github-api-base-url-v4',
            'http://localhost/graphql',
        ];
        mockGetDefaultRepoBranch({ defaultBranch: 'my-default-branch' });
        const options = await options_1.getOptions(argv);
        expect(options.sourceBranch).toBe('my-source-branch');
    });
    it('should ensure that "backport" branch does not exist', async () => {
        mockGetDefaultRepoBranch({
            defaultBranch: 'my-default-branch',
            refName: 'backport',
        });
        await expect(options_1.getOptions(defaultArgs)).rejects.toThrowError('You must delete the branch "backport" to continue. See https://github.com/sqren/backport/issues/155 for details');
    });
    it('should omit upstream', async () => {
        mockGetDefaultRepoBranch({ defaultBranch: 'my-default-branch' });
        const options = await options_1.getOptions(defaultArgs);
        //@ts-expect-error
        expect(options.upstream).toBe(undefined);
    });
    it('should merge config options and module options', async () => {
        mockGetDefaultRepoBranch({ defaultBranch: 'my-default-branch' });
        const myFn = async () => true;
        const options = await options_1.getOptions(defaultArgs, { autoFixConflicts: myFn });
        expect(options.autoFixConflicts).toBe(myFn);
    });
    it('should call setLogLevel', async () => {
        mockGetDefaultRepoBranch({ defaultBranch: 'my-default-branch' });
        await options_1.getOptions(defaultArgs);
        expect(logger.setLogLevel).toHaveBeenCalledWith({ verbose: false });
    });
    it('should return options', async () => {
        mockGetDefaultRepoBranch({ defaultBranch: 'some-branch-name' });
        const options = await options_1.getOptions(defaultArgs);
        expect(options).toEqual({
            accessToken: 'myAccessToken',
            all: false,
            author: 'sqren',
            assignees: [],
            ci: false,
            dryRun: false,
            fork: true,
            gitHostname: 'github.com',
            githubApiBaseUrlV3: 'https://api.github.com',
            githubApiBaseUrlV4: 'http://localhost/graphql',
            maxNumber: 10,
            multipleBranches: true,
            multipleCommits: false,
            noVerify: true,
            prTitle: '[{targetBranch}] {commitMessages}',
            repoName: 'kibana',
            repoOwner: 'elastic',
            resetAuthor: false,
            sourceBranch: 'some-branch-name',
            sourcePRLabels: [],
            targetBranchChoices: [
                { checked: false, name: '6.0' },
                { checked: false, name: '5.9' },
            ],
            targetBranches: ['6.0', '6.1'],
            targetPRLabels: [],
            username: 'sqren',
            verbose: false,
        });
    });
});
