import { ConfigOptions, BranchChoice } from './ConfigOptions';
export declare type OptionsFromCliArgs = ReturnType<typeof getOptionsFromCliArgs>;
export declare function getOptionsFromCliArgs(configOptions: ConfigOptions, argv: readonly string[]): {
    autoFixConflicts: (({ files, directory, logger, targetBranch, }: {
        files: string[];
        directory: string;
        logger: {
            error: (message: string, meta?: unknown) => void;
            warn: (message: string, meta?: unknown) => void;
            info: (message: string, meta?: unknown) => void;
            verbose: (message: string, meta?: unknown) => void;
            debug: (message: string, meta?: unknown) => void;
        };
        targetBranch: string;
    }) => boolean | Promise<boolean>) | undefined;
    assignees: string[];
    branchLabelMapping: Record<string, string> | undefined;
    multipleBranches: boolean;
    multipleCommits: boolean;
    noVerify: boolean;
    targetBranchChoices: BranchChoice[];
    accessToken: string | undefined;
    all: boolean;
    author: string | undefined;
    ci: boolean;
    dryRun: boolean;
    editor: string | undefined;
    fork: boolean;
    gitHostname: string;
    githubApiBaseUrlV3: string;
    githubApiBaseUrlV4: string;
    mainline: number | undefined;
    maxNumber: number;
    path: string | undefined;
    prTitle: string;
    prDescription: string | undefined;
    prFilter: string | undefined;
    pullNumber: number | undefined;
    resetAuthor: boolean;
    sha: string | undefined;
    sourceBranch: string | undefined;
    sourcePRLabels: string[];
    targetBranches: string[];
    targetPRLabels: string[];
    upstream: string | undefined;
    username: string | undefined;
    verbose: boolean;
};
