"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValidatedOptions = void 0;
const lodash_isempty_1 = __importDefault(require("lodash.isempty"));
const HandledError_1 = require("../services/HandledError");
const env_1 = require("../services/env");
const GLOBAL_CONFIG_DOCS_LINK = 'https://github.com/sqren/backport/blob/e119d71d6dc03cd061f6ad9b9a8b1cd995f98961/docs/configuration.md#global-config-backportconfigjson';
const PROJECT_CONFIG_DOCS_LINK = 'https://github.com/sqren/backport/blob/e119d71d6dc03cd061f6ad9b9a8b1cd995f98961/docs/configuration.md#project-config-backportrcjson';
function getValidatedOptions({ 
// omit `upstream` from options
upstream, ...options }) {
    // ensure accessToken and username are given
    if (!options.accessToken || !options.username) {
        const globalConfigPath = env_1.getGlobalConfigPath();
        throw new HandledError_1.HandledError(`Please update your config file: ${globalConfigPath}.\nIt must contain a valid "username" and "accessToken".\n\nRead more: ${GLOBAL_CONFIG_DOCS_LINK}`);
    }
    // ensure targetBranches or targetBranchChoices are given
    if (lodash_isempty_1.default(options.targetBranches) && lodash_isempty_1.default(options.targetBranchChoices)) {
        throw new HandledError_1.HandledError(`You must specify a target branch\n\nYou can specify it via either:\n - Config file (recommended): ".backportrc.json". Read more: ${PROJECT_CONFIG_DOCS_LINK}\n - CLI: "--branch 6.1"`);
    }
    // ensure a valid upstream is given
    const [repoOwner, repoName] = (upstream !== null && upstream !== void 0 ? upstream : '').split('/');
    if (!repoOwner || !repoName) {
        throw new HandledError_1.HandledError(`You must specify a valid Github repository\n\nYou can specify it via either:\n - Config file (recommended): ".backportrc.json". Read more: ${PROJECT_CONFIG_DOCS_LINK}\n - CLI: "--upstream elastic/kibana"`);
    }
    return {
        ...options,
        // no longer optional
        accessToken: options.accessToken,
        username: options.username,
        // split upstream
        repoName,
        repoOwner,
        // define author
        author: options.author || options.username,
        all: options.author ? false : options.all,
    };
}
exports.getValidatedOptions = getValidatedOptions;
