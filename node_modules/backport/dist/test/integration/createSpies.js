"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSpies = void 0;
const childProcess = require("child_process");
const os_1 = __importDefault(require("os"));
const inquirer_1 = __importDefault(require("inquirer"));
const nock_1 = __importDefault(require("nock"));
const commitsByAuthorMock_1 = require("../../services/github/v4/mocks/commitsByAuthorMock");
const nockHelpers_1 = require("../nockHelpers");
const envConstants_1 = require("./envConstants");
const unmockedExec = childProcess.exec;
function createSpies({ commitCount }) {
    // set alternative homedir
    jest.spyOn(os_1.default, 'homedir').mockReturnValue(envConstants_1.HOMEDIR_PATH);
    // mock childProcess.exec
    mockExec();
    // mock inquirer.prompt
    mockInquirerPrompts(commitCount);
    const getDefaultRepoBranchCalls = nockHelpers_1.mockGqlRequest({
        name: 'DefaultRepoBranch',
        statusCode: 200,
        body: { data: { repository: { defaultBranchRef: { name: 'master' } } } },
    });
    const authorIdCalls = nockHelpers_1.mockGqlRequest({
        name: 'AuthorId',
        statusCode: 200,
        body: { data: { user: { id: 'sqren_author_id' } } },
    });
    const commitsByAuthorCalls = nockHelpers_1.mockGqlRequest({
        name: 'CommitsByAuthor',
        statusCode: 200,
        body: { data: commitsByAuthorMock_1.commitsWithPullRequestsMock },
    });
    const createPullRequestCalls = mockCreatePullRequest();
    return {
        getDefaultRepoBranchCalls,
        authorIdCalls,
        commitsByAuthorCalls,
        createPullRequestCalls,
    };
}
exports.createSpies = createSpies;
function mockExec() {
    jest.spyOn(childProcess, 'exec').mockImplementation((cmd, options, cb) => {
        const nextCmd = cmd
            .replace('https://myAccessToken@github.com/backport-org/backport-demo.git', envConstants_1.REMOTE_ORIGIN_REPO_PATH)
            .replace('https://myAccessToken@github.com/sqren/backport-demo.git', envConstants_1.REMOTE_FORK_REPO_PATH);
        return unmockedExec(nextCmd, options, cb);
    });
}
function mockInquirerPrompts(commitCount) {
    jest
        .spyOn(inquirer_1.default, 'prompt')
        .mockImplementationOnce((async (args) => {
        return {
            promptResult: commitCount === 2
                ? [args[0].choices[0].value, args[0].choices[1].value]
                : args[0].choices[1].value,
        };
    }))
        .mockImplementationOnce((async (args) => {
        return { promptResult: args[0].choices[0].name };
    }));
}
function mockCreatePullRequest() {
    const scope = nock_1.default('https://api.github.com')
        .post('/repos/backport-org/backport-demo/pulls')
        .reply(200, { number: 1337, html_url: 'myHtmlUrl' });
    return nockHelpers_1.getNockCallsForScope(scope);
}
