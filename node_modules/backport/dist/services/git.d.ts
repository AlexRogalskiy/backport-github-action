import { BackportOptions } from '../options/options';
import { CommitSelected } from '../types/Commit';
export declare function repoExists(options: BackportOptions): Promise<boolean>;
export declare function deleteRepo(options: BackportOptions): Promise<string[]>;
export declare function getRemoteUrl({ repoName, accessToken, gitHostname }: BackportOptions, repoOwner: string): string;
export declare function cloneRepo(options: BackportOptions, callback: (progress: string) => void): Promise<unknown>;
export declare function deleteRemote(options: BackportOptions, remoteName: string): Promise<void>;
export declare function addRemote(options: BackportOptions, remoteName: string): Promise<void>;
export declare function cherrypick(options: BackportOptions, commit: CommitSelected): Promise<{
    needsResolving: boolean;
}>;
export declare function finalizeCherrypick(options: BackportOptions): Promise<void>;
export declare function getConflictingFiles(options: BackportOptions): Promise<string[]>;
export declare function getUnstagedFiles(options: BackportOptions): Promise<string[]>;
export declare function setCommitAuthor(options: BackportOptions, username: string): Promise<{
    stdout: string;
    stderr: string;
}>;
export declare function createBackportBranch({ options, targetBranch, backportBranch, }: {
    options: BackportOptions;
    targetBranch: string;
    backportBranch: string;
}): Promise<{
    stdout: string;
    stderr: string;
}>;
export declare function deleteBackportBranch({ options, backportBranch, }: {
    options: BackportOptions;
    backportBranch: string;
}): Promise<void>;
export declare function getRepoForkOwner(options: BackportOptions): string;
export declare function pushBackportBranch({ options, backportBranch, }: {
    options: BackportOptions;
    backportBranch: string;
}): Promise<{
    stdout: string;
    stderr: string;
} | undefined>;
