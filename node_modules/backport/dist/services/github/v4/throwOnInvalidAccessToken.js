"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwOnInvalidAccessToken = void 0;
const HandledError_1 = require("../../HandledError");
const env_1 = require("../../env");
function throwOnInvalidAccessToken({ repoOwner, repoName, error, }) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    function getSSOAuthUrl(ssoHeader) {
        const matches = ssoHeader === null || ssoHeader === void 0 ? void 0 : ssoHeader.match(/url=(.*)/);
        if (matches) {
            return matches[1];
        }
    }
    const statusCode = (_a = error.response) === null || _a === void 0 ? void 0 : _a.status;
    switch (statusCode) {
        case 200: {
            const repoNotFound = (_c = (_b = error.response) === null || _b === void 0 ? void 0 : _b.data.errors) === null || _c === void 0 ? void 0 : _c.some((error) => error.type === 'NOT_FOUND');
            const grantedScopes = (_d = error.response) === null || _d === void 0 ? void 0 : _d.headers['x-oauth-scopes'];
            const requiredScopes = (_e = error.response) === null || _e === void 0 ? void 0 : _e.headers['x-accepted-oauth-scopes'];
            const ssoHeader = (_f = error.response) === null || _f === void 0 ? void 0 : _f.headers['x-github-sso'];
            if (repoNotFound) {
                // repo does not exist
                if (grantedScopes === requiredScopes) {
                    throw new HandledError_1.HandledError(`The repository "${repoOwner}/${repoName}" doesn't exist`);
                }
                // user does not have permissions
                throw new HandledError_1.HandledError(`You do not have access to the repository "${repoOwner}/${repoName}". Please make sure your access token has the required scopes.\n\nRequired scopes: ${requiredScopes}\nAccess token scopes: ${grantedScopes}`);
            }
            const repoAccessForbidden = (_h = (_g = error.response) === null || _g === void 0 ? void 0 : _g.data.errors) === null || _h === void 0 ? void 0 : _h.some((error) => error.type === 'FORBIDDEN');
            const ssoAuthUrl = getSSOAuthUrl(ssoHeader);
            // user does not have permissions
            if (repoAccessForbidden && ssoAuthUrl) {
                throw new HandledError_1.HandledError(`Please follow the link to authorize your personal access token with SSO:\n\n${ssoAuthUrl}`);
            }
            break;
        }
        case 401:
            throw new HandledError_1.HandledError(`Please check your access token and make sure it is valid.\nConfig: ${env_1.getGlobalConfigPath()}`);
    }
}
exports.throwOnInvalidAccessToken = throwOnInvalidAccessToken;
