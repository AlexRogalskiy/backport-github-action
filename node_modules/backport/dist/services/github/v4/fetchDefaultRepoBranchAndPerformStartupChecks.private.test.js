"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getDevAccessToken_1 = require("../../../test/private/getDevAccessToken");
const fetchDefaultRepoBranchAndPerformStartupChecks_1 = require("./fetchDefaultRepoBranchAndPerformStartupChecks");
describe('fetchDefaultRepoBranchAndPerformStartupChecks', () => {
    let devAccessToken;
    beforeAll(async () => {
        devAccessToken = await getDevAccessToken_1.getDevAccessToken();
    });
    describe('accessToken is invalid', () => {
        it('throws an error', async () => {
            const options = {
                accessToken: 'foo',
                githubApiBaseUrlV4: 'https://api.github.com/graphql',
                repoName: 'backport-e2e',
                repoOwner: 'backport-org',
            };
            await expect(fetchDefaultRepoBranchAndPerformStartupChecks_1.fetchDefaultRepoBranchAndPerformStartupChecks(options)).rejects.toThrowError('Please check your access token and make sure it is valid.\nConfig: /myHomeDir/.backport/config.json');
        });
    });
    describe('accessToken is valid', () => {
        it('returns the default branch', async () => {
            const options = {
                accessToken: devAccessToken,
                githubApiBaseUrlV4: 'https://api.github.com/graphql',
                repoName: 'backport-e2e',
                repoOwner: 'backport-org',
            };
            expect(await fetchDefaultRepoBranchAndPerformStartupChecks_1.fetchDefaultRepoBranchAndPerformStartupChecks(options)).toEqual({ defaultBranch: 'master' });
        });
    });
});
