"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchPullRequestBySearchQuery = void 0;
const lodash_isempty_1 = __importDefault(require("lodash.isempty"));
const ora_1 = __importDefault(require("ora"));
const HandledError_1 = require("../../HandledError");
const commitFormatters_1 = require("../commitFormatters");
const apiRequestV4_1 = require("./apiRequestV4");
const getTargetBranchesFromLabels_1 = require("./getTargetBranchesFromLabels");
async function fetchPullRequestBySearchQuery(options) {
    const { accessToken, all, author, branchLabelMapping, githubApiBaseUrlV4, maxNumber, prFilter, repoName, repoOwner, sourceBranch, } = options;
    const query = /* GraphQL */ `
    query PullRequestBySearchQuery($query: String!, $maxNumber: Int!) {
      search(query: $query, type: ISSUE, first: $maxNumber) {
        nodes {
          ... on PullRequest {
            number
            labels(first: 50) {
              nodes {
                name
              }
            }
            mergeCommit {
              oid
              message
            }
          }
        }
      }
    }
  `;
    const authorFilter = all ? '' : `author:${author}`;
    const searchQuery = `type:pr is:merged sort:updated-desc repo:${repoOwner}/${repoName} ${authorFilter} ${prFilter} base:${sourceBranch}`;
    const spinner = ora_1.default('Loading pull requests...').start();
    let res;
    try {
        res = await apiRequestV4_1.apiRequestV4({
            githubApiBaseUrlV4,
            accessToken,
            query,
            variables: {
                query: searchQuery,
                maxNumber: maxNumber,
            },
        });
        spinner.stop();
    }
    catch (e) {
        spinner.fail();
        throw e;
    }
    const commits = res.search.nodes.map((searchNode) => {
        const labels = searchNode.labels.nodes.map((labelNode) => labelNode.name);
        const targetBranchesFromLabels = getTargetBranchesFromLabels_1.getTargetBranchesFromLabels({
            labels,
            branchLabelMapping,
        });
        const sha = searchNode.mergeCommit.oid;
        const pullNumber = searchNode.number;
        const formattedMessage = commitFormatters_1.getFormattedCommitMessage({
            message: searchNode.mergeCommit.message,
            sha,
            pullNumber,
        });
        const choice = {
            sourceBranch,
            targetBranchesFromLabels,
            sha,
            formattedMessage,
            pullNumber,
            existingTargetPullRequests: [],
        };
        return choice;
    });
    // terminate if not commits were found
    if (lodash_isempty_1.default(commits)) {
        const errorText = options.all
            ? `There are no pull requests matching the filter "${prFilter}"`
            : `There are no commits by "${options.author}" matching the filter "${prFilter}". Try with \`--all\` for commits by all users or \`--author=<username>\` for commits from a specific user`;
        throw new HandledError_1.HandledError(errorText);
    }
    return commits;
}
exports.fetchPullRequestBySearchQuery = fetchPullRequestBySearchQuery;
