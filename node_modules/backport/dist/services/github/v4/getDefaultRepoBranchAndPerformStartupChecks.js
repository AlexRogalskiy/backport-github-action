"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultRepoBranchAndPerformStartupChecks = void 0;
const ora_1 = __importDefault(require("ora"));
const HandledError_1 = require("../../HandledError");
const apiRequestV4_1 = require("./apiRequestV4");
const throwOnInvalidAccessToken_1 = require("./throwOnInvalidAccessToken");
// fetches the default source branch for the repo (normally "master")
// startup checks:
// - verify the access token
// - ensure no branch named "backport" exists
async function getDefaultRepoBranchAndPerformStartupChecks({ accessToken, githubApiBaseUrlV4, repoName, repoOwner, }) {
    var _a;
    const query = /* GraphQL */ `
    query getDefaultRepoBranchAndPerformStartupChecks(
      $repoOwner: String!
      $repoName: String!
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        # check whether "backport" branch exists
        ref(qualifiedName: "refs/heads/backport") {
          name
        }

        # get default branch
        defaultBranchRef {
          name
        }
      }
    }
  `;
    let res;
    const spinner = ora_1.default().start('Initializing...');
    try {
        res = await apiRequestV4_1.apiRequestV4({
            githubApiBaseUrlV4,
            accessToken,
            query,
            variables: {
                repoOwner,
                repoName,
            },
            handleError: false,
        });
        spinner.stop();
    }
    catch (e) {
        spinner.stop();
        const error = e;
        throwOnInvalidAccessToken_1.throwOnInvalidAccessToken({
            error,
            repoName,
            repoOwner,
        });
        throw apiRequestV4_1.handleGithubV4Error(error);
    }
    // it is not possible to have a branch named "backport"
    if (((_a = res.repository.ref) === null || _a === void 0 ? void 0 : _a.name) === 'backport') {
        throw new HandledError_1.HandledError('You must delete the branch "backport" to continue. See https://github.com/sqren/backport/issues/155 for details');
    }
    // return default branch
    return {
        defaultBranch: res.repository.defaultBranchRef.name,
    };
}
exports.getDefaultRepoBranchAndPerformStartupChecks = getDefaultRepoBranchAndPerformStartupChecks;
