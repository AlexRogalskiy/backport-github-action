"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getDevAccessToken_1 = require("../../../test/private/getDevAccessToken");
const fetchCommitsByAuthor_1 = require("./fetchCommitsByAuthor");
describe('fetchCommitsByAuthor', () => {
    let devAccessToken;
    beforeAll(async () => {
        devAccessToken = await getDevAccessToken_1.getDevAccessToken();
    });
    describe('existingTargetPullRequests', () => {
        let res;
        beforeEach(async () => {
            res = await fetchCommitsByAuthor_1.fetchCommitsByAuthor({
                repoOwner: 'backport-org',
                repoName: 'backport-e2e',
                sourceBranch: 'master',
                accessToken: devAccessToken,
                username: 'sqren',
                author: 'sqren',
                maxNumber: 10,
                githubApiBaseUrlV4: 'https://api.github.com/graphql',
            });
        });
        it('returns related OPEN PRs', async () => {
            const commitWithOpenPR = res.find((commit) => commit.pullNumber === 9);
            expect(commitWithOpenPR === null || commitWithOpenPR === void 0 ? void 0 : commitWithOpenPR.existingTargetPullRequests).toEqual([
                { branch: '7.8', state: 'OPEN' },
            ]);
        });
        it('returns related MERGED PRs', async () => {
            const commitWithMergedPRs = res.find((commit) => commit.pullNumber === 5);
            expect(commitWithMergedPRs === null || commitWithMergedPRs === void 0 ? void 0 : commitWithMergedPRs.existingTargetPullRequests).toEqual([
                { branch: '7.x', state: 'MERGED' },
                { branch: '7.8', state: 'MERGED' },
            ]);
        });
        it('returns empty if there are no related PRs', async () => {
            const commitWithoutPRs = res.find((commit) => commit.pullNumber === 8);
            expect(commitWithoutPRs === null || commitWithoutPRs === void 0 ? void 0 : commitWithoutPRs.existingTargetPullRequests).toEqual([]);
        });
    });
});
