"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchCommitByPullNumber = void 0;
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const HandledError_1 = require("../../HandledError");
const commitFormatters_1 = require("../commitFormatters");
const apiRequestV4_1 = require("./apiRequestV4");
const getTargetBranchesFromLabels_1 = require("./getTargetBranchesFromLabels");
async function fetchCommitByPullNumber(options) {
    const { accessToken, branchLabelMapping, githubApiBaseUrlV4, pullNumber, repoName, repoOwner, } = options;
    const query = /* GraphQL */ `
    query CommitByPullNumber(
      $repoOwner: String!
      $repoName: String!
      $pullNumber: Int!
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        pullRequest(number: $pullNumber) {
          baseRef {
            name
          }
          mergeCommit {
            oid
            message
          }
          labels(first: 50) {
            nodes {
              name
            }
          }
        }
      }
    }
  `;
    const spinner = ora_1.default(`Loading merge commit from pull request #${options.pullNumber}`).start();
    let res;
    try {
        res = await apiRequestV4_1.apiRequestV4({
            githubApiBaseUrlV4,
            accessToken,
            query,
            variables: {
                repoOwner,
                repoName,
                pullNumber,
            },
        });
        spinner.stop();
    }
    catch (e) {
        spinner.fail();
        throw e;
    }
    if (res.repository.pullRequest.mergeCommit === null) {
        throw new HandledError_1.HandledError(`The PR #${pullNumber} is not merged`);
    }
    const sourceBranch = res.repository.pullRequest.baseRef.name;
    const sha = res.repository.pullRequest.mergeCommit.oid;
    const formattedMessage = commitFormatters_1.getFormattedCommitMessage({
        message: res.repository.pullRequest.mergeCommit.message,
        sha,
        pullNumber,
    });
    // add styles to make it look like a prompt question
    spinner.stopAndPersist({
        symbol: chalk_1.default.green('?'),
        text: `${chalk_1.default.bold('Select pull request')} ${chalk_1.default.cyan(formattedMessage)}`,
    });
    const labels = res.repository.pullRequest.labels.nodes.map((label) => label.name);
    const targetBranchesFromLabels = getTargetBranchesFromLabels_1.getTargetBranchesFromLabels({
        labels,
        branchLabelMapping,
    });
    return {
        sourceBranch,
        targetBranchesFromLabels,
        sha,
        formattedMessage,
        pullNumber,
    };
}
exports.fetchCommitByPullNumber = fetchCommitByPullNumber;
