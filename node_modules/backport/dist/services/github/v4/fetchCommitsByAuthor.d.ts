import { BackportOptions } from '../../../options/options';
import { CommitChoice } from '../../../types/Commit';
export declare function fetchCommitsByAuthor(options: BackportOptions): Promise<CommitChoice[]>;
export declare function getExistingTargetPullRequests(commitMessage: string, sourcePullRequest: PullRequestEdge | undefined): {
    branch: string;
    state: "OPEN" | "CLOSED" | "MERGED";
}[];
export interface DataResponse {
    repository: {
        ref: {
            target: {
                history: {
                    edges: HistoryEdge[];
                };
            };
        } | null;
    };
}
interface HistoryEdge {
    node: {
        oid: string;
        message: string;
        associatedPullRequests: {
            edges: PullRequestEdge[];
        };
    };
}
export interface PullRequestEdge {
    node: {
        number: number;
        mergeCommit: {
            oid: string;
        };
        labels: {
            nodes: {
                name: string;
            }[];
        };
        repository: {
            owner: {
                login: string;
            };
            name: string;
        };
        timelineItems: {
            edges: (TimelineItemEdge | null)[];
        };
    };
}
interface TimelineItemEdge {
    node: {
        source: {
            __typename: string;
            title: string;
            state: 'OPEN' | 'CLOSED' | 'MERGED';
            baseRefName: string;
            commits: {
                edges: CommitEdge[];
            };
        };
    };
}
interface CommitEdge {
    node: {
        commit: {
            message: string;
        };
    };
}
export {};
