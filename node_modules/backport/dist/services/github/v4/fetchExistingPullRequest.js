"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitHead = exports.fetchExistingPullRequest = void 0;
const apiRequestV4_1 = require("./apiRequestV4");
async function fetchExistingPullRequest({ options, prPayload, }) {
    var _a;
    const { githubApiBaseUrlV4, accessToken } = options;
    const query = /* GraphQL */ `
    query ExistingPullRequest(
      $repoOwner: String!
      $repoName: String!
      $base: String!
      $head: String!
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        name
        ref(qualifiedName: $head) {
          name
          associatedPullRequests(
            first: 1
            states: OPEN
            baseRefName: $base
            headRefName: $head
          ) {
            edges {
              node {
                number
                url
              }
            }
          }
        }
      }
    }
  `;
    const { repoForkOwner, head } = splitHead(prPayload);
    const res = await apiRequestV4_1.apiRequestV4({
        githubApiBaseUrlV4,
        accessToken,
        query,
        variables: {
            repoOwner: repoForkOwner,
            repoName: prPayload.repo,
            base: prPayload.base,
            head: head,
        },
    });
    const existingPullRequest = (_a = res.repository.ref) === null || _a === void 0 ? void 0 : _a.associatedPullRequests.edges[0];
    if (!existingPullRequest) {
        return;
    }
    return {
        url: existingPullRequest.node.url,
        number: existingPullRequest.node.number,
    };
}
exports.fetchExistingPullRequest = fetchExistingPullRequest;
function splitHead(prPayload) {
    const [repoForkOwner, head] = prPayload.head.split(':');
    return { repoForkOwner, head };
}
exports.splitHead = splitHead;
