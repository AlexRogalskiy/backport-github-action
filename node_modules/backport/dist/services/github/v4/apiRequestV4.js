"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleGithubV4Error = exports.apiRequestV4 = void 0;
const axios_1 = __importDefault(require("axios"));
const HandledError_1 = require("../../HandledError");
const logger_1 = require("../../logger");
async function apiRequestV4({ githubApiBaseUrlV4, accessToken, query, variables, handleError = true, }) {
    var _a, _b, _c;
    try {
        const response = await axios_1.default.post(githubApiBaseUrlV4, { query, variables }, {
            headers: {
                'Content-Type': 'application/json',
                Authorization: `bearer ${accessToken}`,
            },
        });
        if (response.data.errors) {
            const newError = new Error();
            //@ts-expect-error
            newError.response = response;
            throw newError;
        }
        logger_1.logger.info(`POST ${githubApiBaseUrlV4} (status: ${response.status})`);
        logger_1.logger.verbose('Query:', query);
        logger_1.logger.verbose('Variables:', variables);
        logger_1.logger.debug('Response headers:', response.headers);
        logger_1.logger.verbose('Response data:', response.data);
        return response.data.data;
    }
    catch (e) {
        logger_1.logger.info(`POST ${githubApiBaseUrlV4} (status: ${(_a = e.response) === null || _a === void 0 ? void 0 : _a.status})`);
        logger_1.logger.info('Query:', query);
        logger_1.logger.info('Variables:', variables);
        logger_1.logger.debug('Response headers:', (_b = e.response) === null || _b === void 0 ? void 0 : _b.headers);
        logger_1.logger.info('Response data:', (_c = e.response) === null || _c === void 0 ? void 0 : _c.data);
        if (handleError) {
            throw handleGithubV4Error(e);
        }
        throw e;
    }
}
exports.apiRequestV4 = apiRequestV4;
function handleGithubV4Error(e) {
    var _a, _b;
    // not github api error
    if (!((_a = e.response) === null || _a === void 0 ? void 0 : _a.data)) {
        return e;
    }
    const errorMessages = (_b = e.response.data.errors) === null || _b === void 0 ? void 0 : _b.map((error) => error.message);
    if (errorMessages) {
        return new HandledError_1.HandledError(`${errorMessages.join(', ')} (Github v4)`);
    }
    return new HandledError_1.HandledError(`Unexpected response from Github API (v4):\n${JSON.stringify(e.response.data, null, 2)}`);
}
exports.handleGithubV4Error = handleGithubV4Error;
