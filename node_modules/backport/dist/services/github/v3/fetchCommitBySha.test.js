"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nock_1 = __importDefault(require("nock"));
const fetchCommitBySha_1 = require("./fetchCommitBySha");
const commitByShaMock_1 = require("./mocks/commitByShaMock");
describe('fetchCommitBySha', () => {
    afterEach(() => {
        nock_1.default.cleanAll();
    });
    it('should return single commit with pull request', async () => {
        const options = {
            repoOwner: 'elastic',
            repoName: 'kibana',
            sha: 'sha123456789',
            githubApiBaseUrlV3: 'https://api.github.com',
        };
        // mock commits
        const scope = nock_1.default('https://api.github.com')
            .get('/search/commits')
            .query({
            per_page: '1',
            q: 'hash:sha123456789 repo:elastic/kibana',
        })
            .reply(200, {
            items: [{ commit: { message: 'myMessage' }, sha: options.sha }],
        });
        await expect(await fetchCommitBySha_1.fetchCommitBySha(options)).toEqual({
            sourceBranch: 'master',
            formattedMessage: 'myMessage (sha12345)',
            pullNumber: undefined,
            sha: 'sha123456789',
            targetBranchesFromLabels: [],
        });
        scope.done();
    });
    it('should return a single commit without PR', async () => {
        const scope = nock_1.default('https://api.github.com')
            .get('/search/commits')
            .query({
            per_page: '1',
            q: 'hash:myCommitSha repo:elastic/kibana',
        })
            .reply(200, { items: [commitByShaMock_1.commitByShaMock] });
        const commit = await fetchCommitBySha_1.fetchCommitBySha({
            username: 'sqren',
            accessToken: 'myAccessToken',
            repoOwner: 'elastic',
            repoName: 'kibana',
            sha: 'myCommitSha',
            githubApiBaseUrlV3: 'https://api.github.com',
        });
        const expectedCommit = {
            sourceBranch: 'master',
            formattedMessage: '[Chrome] Bootstrap Angular into document.body (myCommit)',
            sha: 'myCommitSha',
            pullNumber: undefined,
            targetBranchesFromLabels: [],
        };
        expect(commit).toEqual(expectedCommit);
        scope.done();
    });
    it('should throw error if sha does not exist', async () => {
        const scope = nock_1.default('https://api.github.com')
            .get('/search/commits')
            .query({
            per_page: '1',
            q: 'hash:myCommitSha repo:elastic/kibana',
        })
            .reply(200, { items: [] });
        await expect(fetchCommitBySha_1.fetchCommitBySha({
            repoOwner: 'elastic',
            repoName: 'kibana',
            sha: 'myCommitSha',
            githubApiBaseUrlV3: 'https://api.github.com',
        })).rejects.toThrowError('No commit found on master with sha "myCommitSha"');
        scope.done();
    });
});
