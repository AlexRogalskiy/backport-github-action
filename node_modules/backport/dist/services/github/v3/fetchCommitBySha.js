"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchCommitBySha = void 0;
const rest_1 = require("@octokit/rest");
const chalk_1 = __importDefault(require("chalk"));
const lodash_isempty_1 = __importDefault(require("lodash.isempty"));
const ora_1 = __importDefault(require("ora"));
const HandledError_1 = require("../../HandledError");
const logger_1 = require("../../logger");
const commitFormatters_1 = require("../commitFormatters");
const getGithubV3ErrorMessage_1 = require("./getGithubV3ErrorMessage");
async function fetchCommitBySha(options) {
    const { githubApiBaseUrlV3, repoName, repoOwner, sha, accessToken } = options;
    const spinner = ora_1.default(`Loading commit "${commitFormatters_1.getShortSha(sha)}"`).start();
    let res;
    try {
        const octokit = new rest_1.Octokit({
            auth: accessToken,
            baseUrl: githubApiBaseUrlV3,
            log: logger_1.logger,
        });
        res = await octokit.search.commits({
            per_page: 1,
            q: `hash:${sha} repo:${repoOwner}/${repoName}`,
        });
        spinner.stop();
    }
    catch (e) {
        spinner.fail();
        throw new HandledError_1.HandledError(`Could not fetch commits: ${getGithubV3ErrorMessage_1.getGithubV3ErrorMessage(e)}`);
    }
    // TODO: it should be possible to backport from other branches than master
    if (lodash_isempty_1.default(res.data.items)) {
        throw new HandledError_1.HandledError(`No commit found on master with sha "${sha}"`);
    }
    const commitRes = res.data.items[0];
    const fullSha = commitRes.sha;
    const formattedMessage = commitFormatters_1.getFormattedCommitMessage({
        message: commitRes.commit.message,
        sha: fullSha,
    });
    // add styles to make it look like a prompt question
    spinner.stopAndPersist({
        symbol: chalk_1.default.green('?'),
        text: `${chalk_1.default.bold('Select commit')} ${chalk_1.default.cyan(formattedMessage)}`,
    });
    return {
        sourceBranch: 'master',
        targetBranchesFromLabels: [],
        formattedMessage,
        sha: fullSha,
    };
}
exports.fetchCommitBySha = fetchCommitBySha;
