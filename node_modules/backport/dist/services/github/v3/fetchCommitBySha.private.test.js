"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getDevAccessToken_1 = require("../../../test/private/getDevAccessToken");
const fetchCommitBySha_1 = require("./fetchCommitBySha");
describe('fetchCommitBySha', () => {
    let devAccessToken;
    beforeEach(async () => {
        devAccessToken = await getDevAccessToken_1.getDevAccessToken();
    });
    it('should return single commit with pull request', async () => {
        await expect(await fetchCommitBySha_1.fetchCommitBySha({
            repoOwner: 'elastic',
            repoName: 'kibana',
            accessToken: devAccessToken,
            sha: 'cb6fbc0',
            githubApiBaseUrlV3: 'https://api.github.com',
        })).toEqual({
            formattedMessage: '[APM] Add API tests (#70740)',
            pullNumber: undefined,
            sha: 'cb6fbc0e1b406675724181a3e9f59459b5f8f892',
            sourceBranch: 'master',
            targetBranchesFromLabels: [],
        });
    });
    it('should throw error if sha does not exist', async () => {
        await expect(fetchCommitBySha_1.fetchCommitBySha({
            repoOwner: 'elastic',
            repoName: 'kibana',
            accessToken: devAccessToken,
            sha: 'fc22f59',
            githubApiBaseUrlV3: 'https://api.github.com',
        })).rejects.toThrowError('No commit found on master with sha "fc22f59"');
    });
    it('should throw error if sha is invalid', async () => {
        await expect(fetchCommitBySha_1.fetchCommitBySha({
            repoOwner: 'elastic',
            repoName: 'kibana',
            accessToken: devAccessToken,
            sha: 'myCommitSha',
            githubApiBaseUrlV3: 'https://api.github.com',
        })).rejects.toThrowError('The given commit SHA is not in a recognized format (Github v3)');
    });
});
