"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addConsoleTransport = exports.initLogger = exports.redact = exports.setRedactedAccessToken = exports.logger = exports.setLogLevel = exports.consoleLog = void 0;
const dedent_1 = __importDefault(require("dedent"));
const lodash_isstring_1 = __importDefault(require("lodash.isstring"));
const safe_json_stringify_1 = __importDefault(require("safe-json-stringify"));
const winston_1 = __importStar(require("winston"));
const env_1 = require("./env");
const { combine } = winston_1.format;
let winstonInstance;
// wrapper around console.log
function consoleLog(message) {
    // eslint-disable-next-line no-console
    console.log(redact(message));
    //process.stdout.write(message);
}
exports.consoleLog = consoleLog;
function setLogLevel({ verbose }) {
    winstonInstance.level = verbose ? 'debug' : 'info';
}
exports.setLogLevel = setLogLevel;
exports.logger = {
    error: (message, meta) => {
        winstonInstance.error(message, { meta });
    },
    warn: (message, meta) => {
        winstonInstance.warn(message, { meta });
    },
    info: (message, meta) => {
        winstonInstance.info(message, { meta });
    },
    verbose: (message, meta) => {
        winstonInstance.verbose(message, { meta });
    },
    debug: (message, meta) => {
        winstonInstance.debug(message, { meta });
    },
};
let redactedAccessToken;
function setRedactedAccessToken(accessToken) {
    redactedAccessToken = accessToken;
}
exports.setRedactedAccessToken = setRedactedAccessToken;
function redact(str) {
    if (redactedAccessToken) {
        return str.replace(new RegExp(redactedAccessToken, 'g'), '<REDACTED>');
    }
    return str;
}
exports.redact = redact;
function initLogger() {
    winstonInstance = winston_1.default.createLogger({
        transports: [
            // log to file
            new winston_1.default.transports.File({
                format: combine(winston_1.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), winston_1.default.format.metadata({
                    fillExcept: ['message', 'level', 'timestamp', 'label'],
                }), winston_1.format.printf((info) => {
                    // format without metadata
                    if (!info.metadata.meta) {
                        return redact(`${info.timestamp}: ${info.message}`);
                    }
                    // format when metadata is a string
                    if (lodash_isstring_1.default(info.metadata.meta)) {
                        return redact(`${info.timestamp}: ${info.message}\n${dedent_1.default(info.metadata.meta)}\n`);
                    }
                    // format when metadata is an object
                    return redact(`${info.timestamp}: ${info.message}\n${safe_json_stringify_1.default(info.metadata.meta, null, 2)}\n`);
                })),
                filename: env_1.getLogfilePath(),
            }),
        ],
    });
    // wait exiting until logs have been flushed to disk
    winstonInstance.on('finish', () => {
        process.exit(1);
    });
    return exports.logger;
}
exports.initLogger = initLogger;
function addConsoleTransport() {
    winstonInstance.add(new winston_1.default.transports.Console());
}
exports.addConsoleTransport = addConsoleTransport;
// log levels:
// - error
// - warn
// - info
// - verbose
// - debug
