"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts = __importStar(require("../services/prompts"));
const getTargetBranches_1 = require("./getTargetBranches");
describe('getTargetBranches', () => {
    let promptSpy;
    beforeEach(() => {
        jest.clearAllMocks();
        promptSpy = jest
            .spyOn(prompts, 'promptForTargetBranches')
            .mockResolvedValueOnce(['branchA']);
    });
    describe('when `targetBranchesFromLabels=["7.x"]`', () => {
        let targetBranchChoices;
        beforeEach(async () => {
            const options = {
                targetBranches: [],
                multipleBranches: true,
                targetBranchChoices: [
                    { name: 'master' },
                    { name: '7.x' },
                    { name: '7.7' },
                    { name: '7.6' },
                    { name: '7.5' },
                ],
                sourceBranch: 'master',
            };
            const commits = [
                {
                    sourceBranch: 'master',
                    targetBranchesFromLabels: ['7.x'],
                    sha: 'my-sha',
                    formattedMessage: '[backport] Bump to 5.1.3 (#62286)',
                    pullNumber: 62286,
                    existingTargetPullRequests: [],
                },
            ];
            await getTargetBranches_1.getTargetBranches(options, commits);
            targetBranchChoices = promptSpy.mock.calls[0][0].targetBranchChoices;
        });
        it('should list the correct branches', async () => {
            expect(targetBranchChoices).toEqual([
                { checked: true, name: '7.x' },
                { checked: false, name: '7.7' },
                { checked: false, name: '7.6' },
                { checked: false, name: '7.5' },
            ]);
        });
        it('should not list the sourceBranch (master)', async () => {
            expect(targetBranchChoices).not.toContainEqual(expect.objectContaining({ name: 'master' }));
        });
        it('should select 7.x', async () => {
            expect(targetBranchChoices).toContainEqual({
                name: '7.x',
                checked: true,
            });
        });
    });
    describe('when `targetBranchesFromLabels=["8.0.0"]`', () => {
        let targetBranchChoices;
        beforeEach(async () => {
            const options = {
                targetBranches: [],
                multipleBranches: true,
                targetBranchChoices: [
                    { name: '7.x' },
                    { name: '7.7' },
                    { name: '7.6' },
                    { name: '7.5' },
                ],
                sourceBranch: 'master',
            };
            const commits = [
                {
                    sourceBranch: 'master',
                    targetBranchesFromLabels: ['8.0.0'],
                    sha: 'my-sha',
                    formattedMessage: '[backport] Bump to 5.1.3 (#62286)',
                    pullNumber: 62286,
                    existingTargetPullRequests: [],
                },
            ];
            await getTargetBranches_1.getTargetBranches(options, commits);
            targetBranchChoices = promptSpy.mock.calls[0][0].targetBranchChoices;
        });
        it('should list the correct branches', async () => {
            expect(targetBranchChoices).toEqual([
                { name: '7.x' },
                { name: '7.7' },
                { name: '7.6' },
                { name: '7.5' },
            ]);
        });
    });
    describe('when `options.targetBranches` is empty', () => {
        let branches;
        beforeEach(async () => {
            const options = {
                targetBranches: [],
                targetBranchChoices: [{ name: 'branchA' }, { name: 'branchB' }],
                multipleBranches: false,
            };
            const commits = [
                {
                    formattedMessage: 'hey',
                    targetBranchesFromLabels: [],
                    sha: 'abcd',
                    sourceBranch: '7.x',
                    pullNumber: 1337,
                },
            ];
            branches = await getTargetBranches_1.getTargetBranches(options, commits);
        });
        it('should return branches from prompt', () => {
            expect(branches).toEqual(['branchA']);
        });
        it('should call prompt with correct args', () => {
            expect(promptSpy).toHaveBeenLastCalledWith({
                targetBranchChoices: [{ name: 'branchA' }, { name: 'branchB' }],
                isMultipleChoice: false,
            });
        });
    });
    describe('when `options.targetBranches` is not empty', () => {
        let branches;
        beforeEach(() => {
            branches = getTargetBranches_1.getTargetBranches({
                targetBranches: ['branchA', 'branchB'],
                targetBranchChoices: [],
                multipleBranches: false,
            }, []);
        });
        it('should return branches from `options.branches`', () => {
            expect(branches).toEqual(['branchA', 'branchB']);
        });
        it('should not call prompt', () => {
            expect(promptSpy).not.toHaveBeenCalled();
        });
    });
});
describe('getTargetBranchChoices', () => {
    const options = {
        ci: false,
        targetBranchChoices: [
            { name: 'master', checked: true },
            { name: '7.x', checked: true },
            { name: '7.8', checked: false },
            { name: '7.7', checked: false },
        ],
    };
    const targetBranchesFromLabels = [];
    const sourceBranch = 'master';
    it('should return default branches if none are preselected via labels ', () => {
        const branches = getTargetBranches_1.getTargetBranchChoices(options, targetBranchesFromLabels, sourceBranch);
        expect(branches).toEqual([
            { checked: true, name: '7.x' },
            { checked: false, name: '7.8' },
            { checked: false, name: '7.7' },
        ]);
    });
    it('should not return default branches when running in "--ci" mode', () => {
        const branches = getTargetBranches_1.getTargetBranchChoices({ ...options, ci: true }, targetBranchesFromLabels, sourceBranch);
        expect(branches).toEqual([
            { checked: false, name: '7.x' },
            { checked: false, name: '7.8' },
            { checked: false, name: '7.7' },
        ]);
    });
    it('should pre-select branches based on labels', () => {
        const targetBranchesFromLabels = ['7.7'];
        const branches = getTargetBranches_1.getTargetBranchChoices(options, targetBranchesFromLabels, sourceBranch);
        expect(branches).toEqual([
            { checked: false, name: '7.x' },
            { checked: false, name: '7.8' },
            { checked: true, name: '7.7' },
        ]);
    });
});
