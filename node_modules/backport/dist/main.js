"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const chalk_1 = __importDefault(require("chalk"));
const options_1 = require("./options/options");
const runWithOptions_1 = require("./runWithOptions");
const HandledError_1 = require("./services/HandledError");
const env_1 = require("./services/env");
const logger_1 = require("./services/logger");
async function main(argv, optionsFromModule) {
    const logger = logger_1.initLogger();
    try {
        const options = await options_1.getOptions(argv, optionsFromModule);
        const results = await runWithOptions_1.runWithOptions(options);
        return {
            success: results.every((res) => res.success),
            results,
        };
    }
    catch (e) {
        const isHandledError = e instanceof HandledError_1.HandledError;
        if (isHandledError) {
            logger_1.consoleLog(e.message);
        }
        else {
            // output
            logger_1.consoleLog('\n');
            logger_1.consoleLog(chalk_1.default.bold('‚ö†Ô∏è  Ouch! An unknown error occured üòø'));
            logger_1.consoleLog(`Error message: ${e.message}`);
            logger_1.consoleLog('Please open an issue in https://github.com/sqren/backport/issues or contact me directly on https://twitter.com/sorenlouv');
            logger_1.consoleLog(chalk_1.default.italic(`For additional details see the logs: ${env_1.getLogfilePath()}`));
            // log file
            logger.info('Unknown error:', e);
        }
        return {
            success: false,
            results: [],
            errorMessage: isHandledError
                ? logger_1.redact(e.message)
                : 'An unhandled error occurred. Please see the logs for additional details',
            error: e,
        };
    }
}
exports.main = main;
